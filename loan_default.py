# -*- coding: utf-8 -*-
"""Loan Default.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-suI8vYd0H7BcTgWJTZeOY6PHg2rsyfT
"""

import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/AI in Accounting and Finance/Loan Default II (Employed)(1).csv")

from google.colab import drive
drive.mount('/content/drive')

df

df.isna().sum()

df = pd.get_dummies(df, columns=["Employed"])

df

df.describe()

df.hist(figsize=(15,15))

import seaborn as sns
sns.heatmap(df.corr())

import matplotlib.pyplot as plt
sns.countplot(x='Defaulted?', data=df)
plt.title('Distribution of Loan Default Status')
plt.show()

X = df.drop('Defaulted?', axis=1)
Y = df['Defaulted?']

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=268, stratify=Y)

from scipy import stats

X_train["Annual Salary"] = stats.zscore(X_train["Annual Salary"])

X_test["Annual Salary"] = stats.zscore(X_test["Annual Salary"])

from sklearn import linear_model

from sklearn.metrics import accuracy_score, confusion_matrix

model = linear_model.LogisticRegression(max_iter=1000, random_state=268)

model.fit(X_train, Y_train)

pred = model.predict(X_test)

cm = confusion_matrix(Y_test, pred)

cm

print("accuracy is ", accuracy_score(Y_test, pred))

from sklearn import tree

model = tree.DecisionTreeClassifier(random_state=268)

model.fit(X_train, Y_train)
pred = model.predict(X_test)
cm = confusion_matrix(Y_test, pred)
print(cm)
print("accuracy is ", accuracy_score(Y_test, pred))

from sklearn import ensemble

model = ensemble.RandomForestClassifier(random_state=268)

model.fit(X_train, Y_train)
pred = model.predict(X_test)
cm = confusion_matrix(Y_test, pred)
print(cm)
print("accuracy is ", accuracy_score(Y_test, pred))

model = ensemble.GradientBoostingClassifier(random_state=268)

model.fit(X_train, Y_train)
pred = model.predict(X_test)
cm = confusion_matrix(Y_test, pred)
print(cm)
print("accuracy is ", accuracy_score(Y_test, pred))

from sklearn import neural_network

model = neural_network.MLPClassifier(max_iter=1000,random_state=268)

model.fit(X_train, Y_train)
pred = model.predict(X_test)
cm = confusion_matrix(Y_test, pred)
print(cm)
print("accuracy is ", accuracy_score(Y_test, pred))

Y = df.loc[:,["Defaulted?"]]
X = df.loc[:,["Annual Salary"]]

model = linear_model.LogisticRegression()

model.fit(X,Y)

model.coef_

model.intercept_

pred = (-0.00011189 * 1000) + 1.22937616

pred

import numpy as np

pred_txt = np.where(pred >= 0.5, "yes","no")

pred_txt = str(pred_txt)

pred_txt

X = df.loc[:, ["Annual Salary"]]
Y = df.loc[:, ["Defaulted?"]]

model = tree.DecisionTreeClassifier(random_state=268)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=268)

model.fit(X_train, Y_train)
pred = model.predict(X_test)
cm = confusion_matrix(Y_test, pred)
print(cm)
print("accuracy is ", accuracy_score(Y_test, pred))

import joblib

joblib.dump(model, "/content/drive/MyDrive/AI in Accounting and Finance/model.pkl")

model = joblib.load("/content/drive/MyDrive/AI in Accounting and Finance/model.pkl")

import numpy as np
model.predict(np.array(100000).reshape(1,1))

model.predict([[10000]])

